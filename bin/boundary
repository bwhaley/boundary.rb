#!/usr/bin/env ruby

# Define require_relative method for younger rubies
unless Kernel.respond_to?(:require_relative)
  module Kernel
    def require_relative(path)
      require File.join(File.dirname(caller[0]), path.to_str)
    end
  end
end

# Read Boundary credentials
auth = {}
auth[:org] = ENV['BOUNDARY_ORG_ID'] unless ENV['BOUNDARY_ORG_ID'].nil?
auth[:key] = ENV['BOUNDARY_API_KEY'] unless ENV['BOUNDARY_API_KEY'].nil?
abort("Please define BOUNDARY_ORG_ID and BOUNDARY_API_KEY variables.") unless (auth[:org] && auth[:key])

require 'rubygems'
require 'optparse'
require 'pp'
require_relative '../lib/boundary'                                                                            

@options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  @options[:name] = nil
  opts.on("-n", "--name name", "Name of meter (usually the hostname)") do |name|
    @options[:name] = name
  end
  @options[:delete] = nil
  opts.on("-d", "--delete", "Delete meter. Requires -n.") do |delete|
    @options[:delete] = true
  end
  @options[:list] = nil
  opts.on("-l", "--list", "List meters") do |list|
    @options[:list] = true
  end
  @options[:create] = nil
  opts.on("-c", "--create <name>", "Create a new saved search called <name>. Requires -q") do |create|
    @options[:create] = create
  end
  query_text = "A Boundary dynamic group valid query string. Requires -c
                                      Valid query parameters are
                                      name, tag, meter_version, export_address, nic_ip, nic_mac, os_distribution_name,
                                      os_machine, os_nodename, os_release, os_sysname, os_version
                                      These should be separated by AND/OR and can be grouped with parenthesis
                                      Example: '(name:*web* AND tag:*us-west-2*) OR (name:*db* AND nic_ip:*10.0.0.10*)'
                                      NOTE: This method does not sanity check the query string!"
  @options[:ss] = nil
  opts.on("-q", "--query <query parameters>", query_text) do |ss|
    @options[:ss] = ss
  end
  @options[:query] = nil
  opts.on("-s", "--search query", "Search for meters and annotations. Wildcards accepted (wrap in '')") do |query|
    @options[:query] = query
  end
  opts.on( "-h", "--help", "Display this screen" ) do
    puts opts
    exit
  end
end

begin
  optparse.parse!
rescue OptionParser::ParseError => e
  puts "OptionParser encountered an error. #{e}"
  exit 1
end

optionserror = []
if (@options[:list].nil? && @options[:delete].nil? && @options[:query].nil? && @options[:create].nil?)
  optionserror << "List, Search, Create or Delete required"
elsif (@options[:create] && @options[:ss].nil?)
  optionserror << "create (-c) requires query (-q) argument."
elsif (@options[:delete] && @options[:name].nil?)
  optionserror << "Name required for delete"
end
unless optionserror.empty?
  abort "#{$0} syntax error: #{optionserror.join("\n")}"
end

def list(auth)
  meters = Boundary::MeterManager.new(auth)
  printf "%-40s %-20s %s\n", "Name", "ID", "Updated"
  meters.list.each do |m|
    printf "%-40s %s %s\n", m['name'], m['id'], m['updated_at']
  end
end

def delete(auth,name)
  meters = Boundary::MeterManager.new(auth)
  case meters.delete(name)
  when nil
    puts "Meter #{name} not found."
  else
    puts "Deleted #{name}."
  end
end

def search(auth,query)
  puts "Searching for #{query}..."
  meters = Boundary::Search.new(auth)
  case (results=meters.search(query))
  when nil
    puts "No meters or annotiations matching #{query} were found."
  else
    results.each do |result|
      puts result['body']['name']+' '+result['id']
    end
  end
end

def create(auth, name, qp, type='meter')
  puts "Creating saved-search '#{name}' with query '#{qp}'..."
  s = Boundary::Search.new(auth)
  case (id=s.create(name, qp, type))
  when nil
    puts "Saved search could not be created."
  else
    puts "Search created with ID #{id}"
  end 
end

if @options[:list]
  list(auth)
elsif @options[:delete]
  delete(auth,@options[:name])
elsif @options[:query]
  search(auth,@options[:query])
elsif @options[:create]
  create(auth, @options[:create], @options[:ss])
end

